package com.wisedu.cloud.smp.biz.consumer;

import com.alibaba.fastjson.JSON;
import com.wisedu.cloud.smp.biz.config.Constant;
import com.wisedu.cloud.smp.biz.model.api.ApplyServicesBo;
import com.wisedu.cloud.smp.common.conf.GlobalConf;
import com.wisedu.cloud.smp.common.exception.ServiceException;
import com.wisedu.cloud.smp.common.util.MD5Utils;
import com.wisedu.cloud.smp.common.util.Utils;
import com.wisedu.cloud.smp.dal.sp.dao.ProxyApplyDao;
import com.wisedu.cloud.smp.dal.sp.dao.ProxyServiceDao;
import com.wisedu.cloud.smp.dal.sp.dao.UserRoleDao;
import com.wisedu.cloud.smp.dal.sp.model.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.amqp.core.Message;
import org.springframework.amqp.core.MessageListener;
import org.springframework.amqp.support.converter.JsonMessageConverter;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;


/**
 * Created by huangxuecan on 2016/03/16.
 */

public class ApplyServiceConsumerListener implements MessageListener{

    private static final Logger LOGGER = LoggerFactory.getLogger(ApplyServiceConsumerListener.class);

    @Autowired
    private UserRoleDao userRoleDao;

    @Autowired
    private ProxyApplyDao proxyApplyDao;

    @Autowired
    private ProxyServiceDao proxyServiceDao;

    private ApplyServicesBo applyServicesBo;

    public void onMessage(Message message){
        JsonMessageConverter messageConverter = new JsonMessageConverter();
        Object receMessage = messageConverter.fromMessage(message);
        applyServicesBo = (ApplyServicesBo) receMessage;
        LOGGER.info("applyServiceConsumerListener,the message is:"+JSON.toJSONString(applyServicesBo));
        try {
            if(isVoNull(applyServicesBo)){
                return;
            }

            User userExist = userRoleDao.getUserByUserName(applyServicesBo.getAppId());
            Integer userId = 0;
            if(isUserNull(userExist)){
                User user = new User();
                user.setDescription(applyServicesBo.getAppName());
                user.setUserName(applyServicesBo.getAppId());
                user.setPassword(MD5Utils.md5(applyServicesBo.getAppId() + GlobalConf.PWD_SALT));
                user.setIsApp(true);
                userRoleDao.insertUser(user);
                UserRole userRole = new UserRole();
                userRole.setUserId(user.getUserId());
                userRole.setRoleId(Constant.ROLE_APP);
                userRoleDao.insertUserRole(userRole);
                userId = user.getUserId();
            }else{
                userId = userExist.getUserId();
            }
            if(0 == userId){
                LOGGER.error("userId is 0",new Throwable());
            }
            ProxyServiceExample proxyServiceExample = new ProxyServiceExample();
            proxyServiceExample.createCriteria().andIdentifyTokenIn(applyServicesBo.getServiceIds()).andIsDelEqualTo(false);
            List<ProxyService> proxyServices = proxyServiceDao.getProxyServiceByExample(proxyServiceExample);
            if(Utils.isNullOrEmpty(proxyServices)){
                LOGGER.error("there are no identify_tokens mapping the serviceIds",new Throwable());
            }
            List<ProxyApply> proxyApplies = new ArrayList<>();
            for(ProxyService proxyService:proxyServices) {
                Date currentTime = new Date();
                ProxyApply proxyApply = new ProxyApply();
                proxyApply.setAppIdentifier(applyServicesBo.getAppId());
                proxyApply.setApplicant(userId);
                proxyApply.setAuditCode(Constant.BEFORE_AUDIT_STATE);
                proxyApply.setProxyServiceId(proxyService.getId());
                proxyApply.setIsDel(false);
                proxyApply.setIsAppToken(Constant.IS_APP_TOKEN);
                proxyApply.setCreateTime(currentTime);
                proxyApply.setUpdateTime(currentTime);
                proxyApplies.add(proxyApply);
            }
            if(!Utils.isNullOrEmpty(proxyApplies)){
                proxyApplyDao.batchInsertProxyApply(proxyApplies);
            }
        }catch (Exception e){
            LOGGER.error("apply service queue consumer meet exception,the message="+ JSON.toJSONString(applyServicesBo), e);
        }

    }


    private boolean isVoNull(ApplyServicesBo applyServicesBo){
        return null == applyServicesBo || null == applyServicesBo.getServiceIds() ||
                applyServicesBo.getServiceIds().isEmpty() || null == applyServicesBo.getAppId()
                || null == applyServicesBo.getAppName() || null == applyServicesBo.getOperatorId();
    }

    private  boolean isUserNull(User userExist){
        return null == userExist || null == userExist.getUserId();
    }

}
