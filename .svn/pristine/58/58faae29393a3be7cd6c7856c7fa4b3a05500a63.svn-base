package com.wisedu.cloud.smp.dal.spc.dao.impl;

import com.wisedu.cloud.smp.common.exception.DaoException;
import com.wisedu.cloud.smp.dal.conf.Constant;
import com.wisedu.cloud.smp.dal.spc.dao.TaskDao;
import com.wisedu.cloud.smp.dal.spc.mapper.TaskExtMapper;
import com.wisedu.cloud.smp.dal.spc.mapper.TaskMapper;
import com.wisedu.cloud.smp.dal.spc.model.Task;
import com.wisedu.cloud.smp.dal.spc.model.extend.SetTokenTask;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Set;

/**
 * Created by huangxuecan on 2016/4/5.
 */
@Repository("taskDao")
public class TaskDaoImpl implements TaskDao {

    @Autowired
    private TaskMapper taskMapper;

    @Autowired
    private TaskExtMapper taskExtMapper;

    @Override
    public void insertTask(Task task) throws DaoException {
        if(null == task){
            return;
        }
        try {
            Date currentTime = new Date();
            task.setCreateTime(currentTime);
            task.setUpdateTime(currentTime);
            task.setStatus((short) 0);
            if(null != task.getErrorMsg() && task.getErrorMsg().length()> Constant.TASK_ERROR_MSG_LEN){
                String errMsgSub = task.getErrorMsg().substring(0,Constant.TASK_ERROR_MSG_LEN-1);
                task.setErrorMsg(errMsgSub);
            }
            taskMapper.insertSelective(task);
        } catch (Exception e) {
            throw new DaoException("",e);
        }
    }

    @Override
    public void updateTask(Task task) throws DaoException {
        if(null == task || null == task.getId()){
            return;
        }
        try {
            task.setUpdateTime(new Date());
            taskMapper.updateByPrimaryKeySelective(task);
        } catch (Exception e) {
            throw new DaoException("",e);
        }

    }

    @Override
    public List<SetTokenTask> getSetTokenTask(Set<String> schoolIds, Set<String> appIds) throws DaoException {
        try {
            if(null == schoolIds || schoolIds.isEmpty() || null == appIds || appIds.isEmpty()){
                return new ArrayList<>();
            }
            return taskExtMapper.getSetTokenTask(schoolIds,appIds);
        } catch (Exception e) {
            throw new DaoException("",e);
        }
    }
}
