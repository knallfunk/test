package com.wisedu.cloud.smp.web.common;

import org.apache.cxf.binding.soap.SoapMessage;
import org.apache.cxf.binding.soap.saaj.SAAJInInterceptor;
import org.apache.cxf.interceptor.Fault;
import org.apache.cxf.phase.AbstractPhaseInterceptor;
import org.apache.cxf.phase.Phase;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.w3c.dom.NodeList;

import javax.xml.soap.SOAPException;
import javax.xml.soap.SOAPHeader;
import javax.xml.soap.SOAPMessage;

public class ReadSoapHeader extends AbstractPhaseInterceptor<SoapMessage> {

    private static final Logger LOGGER = LoggerFactory.getLogger(ReadSoapHeader.class);

    private SAAJInInterceptor saa = new SAAJInInterceptor();

    public ReadSoapHeader() {
        super(Phase.PRE_PROTOCOL);
        getAfter().add(SAAJInInterceptor.class.getName());
    }

    public void handleMessage(SoapMessage message) {

        SOAPMessage mess = message.getContent(SOAPMessage.class);
        if (mess == null) {
            saa.handleMessage(message);
            mess = message.getContent(SOAPMessage.class);
        }
        SOAPHeader head = null;
        try {
            head = mess.getSOAPHeader();
        } catch (SOAPException e) {
            LOGGER.error(WebUtils.getCurrentMethodName() + WebUtils.MEET_EXCEPTION,e);
        }
        if (head == null) {
            return;
        }
        try {
            NodeList nodes = head.getElementsByTagName("appId");
            String appId = nodes.item(0).getTextContent();
            WebContext.getInstance().put(WebContext.APP_ID, appId);
            nodes = head.getElementsByTagName("serviceId");
            String serviceId = nodes.item(0).getTextContent();
            WebContext.getInstance().put(WebContext.SERVICE_ID, serviceId);
            nodes = head.getElementsByTagName("accessToken");
            String accessToken = nodes.item(0).getTextContent();
            WebContext.getInstance().put(WebContext.ACCESS_TOKEN, accessToken);
        } catch (Exception e) {
            LOGGER.error(WebUtils.getCurrentMethodName() + WebUtils.MEET_EXCEPTION,e);
            SOAPException soapExc = new SOAPException("get appId serviceId and accessToken meet exception");
            throw new Fault(soapExc);
        }
    }
}