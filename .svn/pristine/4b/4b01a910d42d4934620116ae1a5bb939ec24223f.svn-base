package com.wisedu.cloud.smp.web.common;


import com.google.common.base.Strings;
import com.wisedu.cloud.smp.biz.service.api.UserAuthService;
import org.apache.log4j.Logger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.net.URL;

/**
 *
 * @author
 */

@Component("permissionFilter")
public class PermissionFilter implements Filter {

	private static final Logger LOGGER = Logger.getLogger(PermissionFilter.class);

	public static final String COOKIE_SMP_SESSION_ID = "SMPSESSIONID";

	@Autowired
	private UserAuthService userAuthService;

	@Override
	public void init(FilterConfig filterConfig) throws ServletException {
		// Do nothing
	}

	@Override
	public void doFilter(ServletRequest request, ServletResponse response,
			FilterChain chain) throws IOException, ServletException {

		HttpServletRequest httpRequest = (HttpServletRequest) request;
		HttpServletResponse httpResponse = (HttpServletResponse) response;
		String sessionId =  httpRequest.getParameter(COOKIE_SMP_SESSION_ID);
		String suffix = httpRequest.getServletPath();
		LOGGER.info("[AccessTokenAuthCheckFilter] access taken filter,the request path:"
				+ httpRequest.getServletPath());
		try {
			if ("/view/productReg.html".equals(suffix)){
				chain.doFilter(httpRequest,httpResponse);
				return;
			}
			if (Strings.isNullOrEmpty(sessionId)){
				String prefixWeb = httpRequest.getHeader("Referer");
				URL prefixUrl = new URL(prefixWeb);
				String url = prefixUrl.getProtocol() + "://" + prefixUrl.getHost() + ":" + prefixUrl.getPort() + "/login.html";
				httpResponse.sendRedirect(url);
				chain.doFilter(httpRequest,httpResponse);
				return;
			}
			boolean flag = userAuthService.isUserLogin(sessionId);
			if (!flag){
				httpResponse.sendRedirect("");
			}
			chain.doFilter(httpRequest,httpResponse);
		}catch (Exception e){
			LOGGER.error(WebUtils.getCurrentMethodName() + WebUtils.MEET_EXCEPTION, e);
			httpResponse.sendRedirect("");
		}
	}

	@Override
	public void destroy() {
		// Do nothing
	}



}
