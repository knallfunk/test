package com.wisedu.cloud.smp.sal.apiapply.impl;

import com.google.common.base.Strings;
import com.wisedu.cloud.smp.common.conf.GlobalConf;
import com.wisedu.cloud.smp.common.exception.DaoException;
import com.wisedu.cloud.smp.common.exception.SalBusinessException;
import com.wisedu.cloud.smp.common.exception.SetTokenParamErrorException;
import com.wisedu.cloud.smp.common.exception.SetTokenWarningException;
import com.wisedu.cloud.smp.common.util.AESUtil;
import com.wisedu.cloud.smp.common.util.MD5Utils;
import com.wisedu.cloud.smp.common.util.Utils;
import com.wisedu.cloud.smp.dal.spc.dao.SchoolEsbDao;
import com.wisedu.cloud.smp.dal.spc.model.SchoolEsb;
import com.wisedu.cloud.smp.sal.apiapply.BaseResponse;
import com.wisedu.cloud.smp.sal.apiapply.SchoolTokenSetRequest;
import com.wisedu.cloud.smp.sal.apiapply.ServiceAPI;
import com.wisedu.cloud.smp.sal.apiapply.api.ServiceAPIProxy;
import com.wisedu.cloud.smp.sal.common.SalConstant;
import com.wisedu.cloud.smp.sal.common.ServiceInvokeUtil;
import org.apache.cxf.jaxws.JaxWsProxyFactoryBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.List;

/**
 * Created by huangxuecan on 2016/3/22.
 */
@Service("serviceAPIProxy")
public class ServiceAPIProxyImpl implements ServiceAPIProxy {

    @Value("#{webserviceInfoConfig['serviceAPI.url']}")
    private String url;

    private String invokeUrl;

    private String urlFormater = "%s://%s:%s";

    @Autowired
    private SchoolEsbDao schoolEsbDao;

    @Autowired
    private JaxWsProxyFactoryBean jaxWsProxyFactoryBean;

    private ServiceAPI serviceAPI;

    @Override
    public void setSchoolAccessToken(String accessToken, String appId, String appName, String schoolId, List<String> serviceIds) throws Exception {

        if(isVoNull(accessToken, appId, appName,schoolId,serviceIds)){
            return;
        }

        SchoolEsb schoolEsb = schoolEsbDao.getSchoolEsbInfo(schoolId);
        this.invokeUrl = String.format(urlFormater, schoolEsb.getProtocol(),schoolEsb.getSmpHost(),schoolEsb.getSmpPort()) + this.url;
        this.setServiceAPI();
        SchoolTokenSetRequest schoolTokenSetRequest = new SchoolTokenSetRequest();
        schoolTokenSetRequest.setAppId(appId);
        schoolTokenSetRequest.setAccessToken(accessToken);
        schoolTokenSetRequest.setAppName(appName);
        schoolTokenSetRequest.setSchoolId(schoolId);
        List<String> serviceIdsReq = schoolTokenSetRequest.getServiceId();
        for(String serviceId:serviceIds){
            serviceIdsReq.add(serviceId);
        }
        BaseResponse baseResponse = serviceAPI.setSchoolAccessToken(schoolTokenSetRequest);
        this.checkBaseResponse(baseResponse);
    }

    private boolean isReturnError(BaseResponse baseResponse){
        return null != baseResponse && (! SalConstant.SUCESS.equals(baseResponse.getStatus())
                && ! SalConstant.SUCCESS_WARNING.equals(baseResponse.getStatus())
                && ! SalConstant.PARAM_ERROR.equals(baseResponse.getStatus()));
    }

    private boolean isReturnSuccessWarning(BaseResponse baseResponse){
       return  SalConstant.SUCCESS_WARNING.equals(baseResponse.getStatus());
    }

    private boolean isReturnParramError(BaseResponse baseResponse){
        return SalConstant.PARAM_ERROR.equals(baseResponse.getStatus());
    }

    private void checkBaseResponse(BaseResponse baseResponse){
        if(null == baseResponse){
            throw new SalBusinessException(SalConstant.ERROR_MSG);
        }
        if(isReturnError(baseResponse)){
            throw new SalBusinessException(SalConstant.ERROR_MSG+baseResponse.getMsg());
        }

        if(isReturnSuccessWarning(baseResponse)){
            throw new SetTokenWarningException(baseResponse.getMsg());
        }

        if(isReturnParramError(baseResponse)){
            throw new SetTokenParamErrorException(SalConstant.PARAM_ERROR_MSG+baseResponse.getMsg());
        }
    }

    private boolean isVoNull(String accessToken, String appId, String appName, String schoolId, List<String> serviceIds){
        return Strings.isNullOrEmpty(accessToken) || Strings.isNullOrEmpty(appId) || Strings.isNullOrEmpty(appName)
                || Strings.isNullOrEmpty(schoolId) || Utils.isNullOrEmpty(serviceIds);
    }

    private void setServiceAPI() throws Exception {
        Date date = new Date();
        Long timestampLong = date.getTime();
        String timestamp = timestampLong.toString();
        jaxWsProxyFactoryBean = ServiceInvokeUtil.setTokenInfo(jaxWsProxyFactoryBean,
                invokeUrl,timestamp, AESUtil.encrypt(timestamp, MD5Utils.md5(GlobalConf.CKEY_GENERATOR).substring(0,16)));

        jaxWsProxyFactoryBean.setServiceClass(ServiceAPI.class);

        this.serviceAPI = (ServiceAPI) jaxWsProxyFactoryBean.create();
    }
}
