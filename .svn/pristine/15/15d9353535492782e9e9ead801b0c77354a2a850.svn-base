package com.wisedu.cloud.smp.biz.service.impl.api;

import com.wisedu.cloud.smp.biz.config.Constant;
import com.wisedu.cloud.smp.biz.model.api.ApplyServicesBo;
import com.wisedu.cloud.smp.biz.service.api.ApiApplyService;
import com.wisedu.cloud.smp.common.conf.GlobalConf;
import com.wisedu.cloud.smp.common.exception.BusinessException;
import com.wisedu.cloud.smp.common.exception.DaoException;
import com.wisedu.cloud.smp.common.exception.ServiceException;
import com.wisedu.cloud.smp.common.util.MD5Utils;
import com.wisedu.cloud.smp.common.util.Utils;
import com.wisedu.cloud.smp.dal.sp.dao.ProxyApplyDao;
import com.wisedu.cloud.smp.dal.sp.dao.ProxyServiceDao;
import com.wisedu.cloud.smp.dal.sp.dao.ServiceDao;
import com.wisedu.cloud.smp.dal.sp.dao.UserRoleDao;
import com.wisedu.cloud.smp.dal.sp.model.*;
import com.wisedu.cloud.smp.dal.sp.model.extend.AppliedApis;
import com.wisedu.cloud.smp.dal.sp.model.extend.ApplyStatus;
import com.wisedu.cloud.smp.dal.sp.model.extend.ServSearchCondition;
import com.wisedu.cloud.smp.dal.sp.model.extend.ServiceInfo;
import com.wisedu.cloud.smp.dal.spc.dao.SchoolEsbDao;
import com.wisedu.cloud.smp.dal.spc.model.SchoolEsb;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.lang.reflect.Proxy;
import java.util.*;

/**
 * Created by huangxuecan on 2016/3/8.
 */
@Service("apiApplyService")
public class ApiApplyServiceImpl implements ApiApplyService {

    @Autowired
    private UserRoleDao userRoleDao;

    @Autowired
    private ProxyApplyDao proxyApplyDao;

    @Autowired
    private ServiceDao serviceDao;

    @Autowired
    private SchoolEsbDao schoolEsbDao;

    @Value("#{rabbitMqQueueConfig['applyservice.queue.name']}")
    private String  applyServiceQueueName;

    @Value("#{rabbitMqQueueConfig['exchange.name']}")
    private String        exchangeName;

    private static String hostFormater = "%s://%s:%s/";

    @Autowired
    private RabbitTemplate rabbitTemplate;

    @Override
    public void applyServices(List<String> serviceIds, String appId, String appName, String operatorId) throws ServiceException {
        try {
            if(null == serviceIds || serviceIds.isEmpty() || null == appId || null == appName){
                return;
            }

            ApplyServicesBo applyServicesBo = new ApplyServicesBo(serviceIds,appId,appName,operatorId);
            rabbitTemplate.setExchange(exchangeName);
            rabbitTemplate.setQueue(applyServiceQueueName);
            rabbitTemplate.setRoutingKey(Constant.APPLY_SERVICE_ROUTINGKEY);
            rabbitTemplate.convertAndSend(applyServicesBo);

        } catch (Exception e) {
            throw new ServiceException("",e);
        }
    }

    @Override
    public List<ApplyStatus> getApplyStatus(List<String> appIds) throws ServiceException {
        if(Utils.isNullOrEmpty(appIds)){
            return new ArrayList<>();
        }
        try {
            List<ApplyStatus> applyStatuses = new ArrayList<>();
            Map<String,ApplyStatus> applyStatusMap = new HashMap<>();
            ProxyApplyExample proxyApplyExample = new ProxyApplyExample();
            proxyApplyExample.createCriteria().andAppIdentifierIn(appIds).andIsDelEqualTo(false);

            List<ProxyApply> proxyApplies = proxyApplyDao.getProxyApplyByExample(proxyApplyExample);
            if(Utils.isNullOrEmpty(proxyApplies)){
                return new ArrayList<>();
            }
            this.doProxyApplyProcess(proxyApplies,applyStatusMap);
            for(Map.Entry<String,ApplyStatus> mapEntry:applyStatusMap.entrySet()){
                ApplyStatus applyStatus1 = mapEntry.getValue();
                applyStatuses.add(applyStatus1);
            }
            return applyStatuses;

        } catch (Exception e) {
            throw new ServiceException("",e);
        }


    }

    private void doProxyApplyProcess(List<ProxyApply> proxyApplies,Map<String,ApplyStatus> applyStatusMap){
        for(ProxyApply proxyApply : proxyApplies){
            ApplyStatus applyStatus = new ApplyStatus();
            applyStatus.setAppId(proxyApply.getAppIdentifier());
            applyStatus.setAccessToken(proxyApply.getAccessToken());
            switch (proxyApply.getAuditCode()){
                case Constant.BEFORE_AUDIT_STATE:
                    applyStatus.setAuditStatus(Constant.AUDIT_BEFORE);
                    break;
                case Constant.AUDIT_NOW_STATE:
                    applyStatus.setAuditStatus(Constant.AUDIT_BEFORE);
                    break;
                case Constant.FINAL_AUDIT_STATE_FAILED:
                    applyStatus.setAuditStatus(Constant.AUDIT_FAILURE);
                    ApplyStatus applyStatusInMap = applyStatusMap.get(proxyApply.getAppIdentifier());
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("");
                    if(null != applyStatusInMap && null != applyStatusInMap.getFailReason()){
                        applyStatus.setFailReason(stringBuilder.append(applyStatusInMap.getFailReason()).append(";").
                                append(proxyApply.getProxyServiceId()).append(":")
                                .append(proxyApply.getAuditComment()).toString());
                    }else{
                        applyStatus.setFailReason(stringBuilder.
                                append(proxyApply.getProxyServiceId()).append(":")
                                .append(proxyApply.getAuditComment()).toString());
                    }
                    break;
                case Constant.FINAL_AUDIT_STATE_SUCCESS:
                    applyStatus.setAuditStatus(Constant.AUDIT_SUCCESS);
                    break;
                default: applyStatus.setAuditStatus(Constant.AUDIT_FAILURE);
            }
            applyStatusMap.put(proxyApply.getAppIdentifier(),applyStatus);
        }
    }

    @Override
    public AppliedApis getAppliedApis(String appId) throws ServiceException {
        if(Utils.isNullOrEmpty(appId)){
            return new AppliedApis();
        }
        try {
            AppliedApis appliedApis = new AppliedApis();
            User user = userRoleDao.getUserByUserName(appId);
            if(isNotNull(user)) {
                appliedApis.setAccessToken(user.getAppAccessToken());
            }
            SchoolEsb schoolEsb = schoolEsbDao.getSchoolEsbInfo(Constant.DEVELOP_SHOOLID);
            if(isNull(schoolEsb)){
                throw new BusinessException("don't have devlopment schoolEsbInfo,schoolId:"+Constant.DEVELOP_SHOOLID);
            }
            appliedApis.setHost(String.format(hostFormater,schoolEsb.getProtocol(), schoolEsb.getEsbHost(),schoolEsb.getEsbPort()));
            List<ServiceInfo> serviceInfos = serviceDao.getServicesByApplyApp(appId);
            appliedApis.setServiceInfos(serviceInfos);
            return appliedApis;
        } catch (DaoException e) {
            throw new ServiceException("",e);
        }

    }

    private boolean isNotNull(User user){
        return null != user && null != user.getAppAccessToken();
    }

    private boolean isNull(SchoolEsb schoolEsb){
        return null == schoolEsb || null == schoolEsb.getEsbHost() || null == schoolEsb.getEsbPort();
    }

}
