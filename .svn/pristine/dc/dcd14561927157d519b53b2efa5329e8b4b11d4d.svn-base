package com.wisedu.cloud.smp.web.api.impl;

import com.alibaba.fastjson.JSON;
import com.google.common.base.Strings;
import com.wisedu.cloud.smp.api.ServiceAPI;
import com.wisedu.cloud.smp.api.params.*;
import com.wisedu.cloud.smp.api.params.ApplyStatus;
import com.wisedu.cloud.smp.biz.model.api.SchoolAppServiceBo;
import com.wisedu.cloud.smp.biz.service.api.ApiApplyService;
import com.wisedu.cloud.smp.biz.service.api.ApiShowService;
import com.wisedu.cloud.smp.biz.service.api.SchoolApiService;
import com.wisedu.cloud.smp.biz.service.api.TokenSetTaskService;
import com.wisedu.cloud.smp.common.util.Utils;
import com.wisedu.cloud.smp.dal.sp.model.ServiceCategory;
import com.wisedu.cloud.smp.dal.sp.model.extend.*;

import com.wisedu.cloud.smp.dal.spc.model.extend.AppEsbInfo;
import com.wisedu.cloud.smp.dal.spc.model.extend.SetTokenTask;
import com.wisedu.cloud.smp.web.common.TransferUtils;
import com.wisedu.cloud.smp.web.common.WebUtils;
import com.wisedu.cloud.smp.web.constant.RetMsg;
import com.wisedu.cloud.smp.web.constant.RetStatus;
import com.wisedu.cloud.smp.web.constant.WebConstant;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans
        .factory.annotation.Autowired;

import javax.jws.WebService;
import java.util.List;

/**
 * Created by huangxuecan on 2016/2/25.
 */
@WebService(endpointInterface = "com.wisedu.cloud.smp.api.ServiceAPI")
public class ServiceAPIImpl implements ServiceAPI{

    private static final Logger LOGGER = LoggerFactory.getLogger(ServiceAPIImpl.class);
    @Autowired
    private ApiShowService apiShowService;

    @Autowired
    private ApiApplyService apiApplyService;

    @Autowired
    private SchoolApiService schoolApiService;

    @Autowired
    private TokenSetTaskService tokenSetTaskService;
    @Override
    public ApiCategoryGetResponse getApiCategories() {
        ApiCategoryGetResponse apiCategoryGetResponse = new ApiCategoryGetResponse();
        LOGGER.info(WebUtils.getCurrentMethodName());
        try {
            List<ServiceCategory> serviceCategoryList = apiShowService.getAllCategories();
            List<ApiCategory> apiCategories = TransferUtils.transServCateToApiCate(serviceCategoryList);
            apiCategoryGetResponse.setApiCategories(apiCategories);
            apiCategoryGetResponse.setStatus(RetStatus.SUCESS.getValue());
            apiCategoryGetResponse.setMsg(RetMsg.MsgStatus.SUCCESS);
            return  apiCategoryGetResponse;
        } catch (Exception e){
            LOGGER.error(WebUtils.getCurrentMethodName() + WebUtils.MEET_EXCEPTION,e);
            apiCategoryGetResponse.setMsg(RetMsg.MsgStatus.SYSTEM_ERROR);
            apiCategoryGetResponse.setStatus(RetStatus.SYSTEM_ERROR.getValue());
            return apiCategoryGetResponse;
        }
    }

    @Override
    public ApisGetResponse getApisByCategoryId(ApisGetRequest apisGetRequest) {
        ApisGetResponse apisGetResponse = new ApisGetResponse();

        if(null == apisGetRequest){
            apisGetResponse.setStatus(RetStatus.PARAM_ERROR.getValue());
            apisGetResponse.setMsg(RetMsg.ParamException.REQUEST_NULL);
            return apisGetResponse;
        }
        LOGGER.info(WebUtils.getCurrentMethodName() + JSON.toJSONString(apisGetRequest));
        if(null == apisGetRequest.getCategoryId() || 0 == apisGetRequest.getCategoryId()){
            apisGetResponse.setStatus(RetStatus.PARAM_ERROR.getValue());
            apisGetResponse.setMsg(RetMsg.ParamException.CAREGORY_ID_NULL);
            return  apisGetResponse;
        }
        try {
            List<ServiceInfo> serviceInfos = apiShowService.getServiceInfoByCategoryId(apisGetRequest.getCategoryId());
            List<ApiInfo> apiInfos = TransferUtils.transServInfoToApiInfo(serviceInfos);
            apisGetResponse.setApiBriefInfos(apiInfos);
            apisGetResponse.setStatus(RetStatus.SUCESS.getValue());
            apisGetResponse.setMsg(RetMsg.MsgStatus.SUCCESS);
            return apisGetResponse;
        } catch (Exception e) {
            LOGGER.error(WebUtils.getCurrentMethodName() + WebUtils.MEET_EXCEPTION,e);
            apisGetResponse.setMsg(RetMsg.MsgStatus.SYSTEM_ERROR);
            apisGetResponse.setStatus(RetStatus.SYSTEM_ERROR.getValue());
            return apisGetResponse;
        }
    }

    @Override
    public CategoriesSearchResponse searchCategories(SearchRequest searchRequest) {
        CategoriesSearchResponse categoriesSearchResponse = new CategoriesSearchResponse();
        if(null == searchRequest){
            categoriesSearchResponse.setStatus(RetStatus.PARAM_ERROR.getValue());
            categoriesSearchResponse.setMsg(RetMsg.ParamException.REQUEST_NULL);
            return  categoriesSearchResponse;
        }
        LOGGER.info(WebUtils.getCurrentMethodName() + JSON.toJSONString(searchRequest));
        if(null == searchRequest.getSearchContent() || "".equals(searchRequest.getSearchContent())){
            categoriesSearchResponse.setStatus(RetStatus.PARAM_ERROR.getValue());
            categoriesSearchResponse.setMsg(RetMsg.ParamException.SEARCH_CONTENT_NULL);
            return categoriesSearchResponse;
        }
        try {
            List<ServiceCategory> serviceCategories = apiShowService.searchCategories(searchRequest.getSearchContent());
            List<ApiCategory> apiCategories = TransferUtils.transServCateToApiCate(serviceCategories);
            categoriesSearchResponse.setApiCategories(apiCategories);
            categoriesSearchResponse.setStatus(RetStatus.SUCESS.getValue());
            categoriesSearchResponse.setMsg(RetMsg.MsgStatus.SUCCESS);
            return categoriesSearchResponse;
        } catch (Exception e) {
            LOGGER.error(WebUtils.getCurrentMethodName() + WebUtils.MEET_EXCEPTION,e);
            categoriesSearchResponse.setMsg(RetMsg.MsgStatus.SYSTEM_ERROR);
            categoriesSearchResponse.setStatus(RetStatus.SYSTEM_ERROR.getValue());
            return categoriesSearchResponse;
        }

    }

    @Override
    public ApiSearchResponse searchApis(SearchRequest searchRequest) {
        ApiSearchResponse apiSearchResponse = new ApiSearchResponse();
        if(null == searchRequest){
            apiSearchResponse.setStatus(RetStatus.PARAM_ERROR.getValue());
            apiSearchResponse.setMsg(RetMsg.ParamException.REQUEST_NULL);
            return  apiSearchResponse;
        }
        LOGGER.info(WebUtils.getCurrentMethodName() + JSON.toJSONString(searchRequest));
        if(null == searchRequest.getSearchContent() || "".equals(searchRequest.getSearchContent())){
            apiSearchResponse.setStatus(RetStatus.PARAM_ERROR.getValue());
            apiSearchResponse.setMsg(RetMsg.ParamException.SEARCH_CONTENT_NULL);
            return apiSearchResponse;
        }
        try {
            List<ServiceInfo> serviceInfos = apiShowService.searchServiceInfo(searchRequest.getSearchContent());
            List<ApiInfo> apiInfos = TransferUtils.transServInfoToApiInfo(serviceInfos);
            apiSearchResponse.setApiInfos(apiInfos);
            apiSearchResponse.setStatus(RetStatus.SUCESS.getValue());
            apiSearchResponse.setMsg(RetMsg.MsgStatus.SUCCESS);
            return apiSearchResponse;
        } catch (Exception e) {
            LOGGER.error(WebUtils.getCurrentMethodName() + WebUtils.MEET_EXCEPTION,e);
            apiSearchResponse.setMsg(RetMsg.MsgStatus.SYSTEM_ERROR);
            apiSearchResponse.setStatus(RetStatus.SYSTEM_ERROR.getValue());
            return apiSearchResponse;
        }

    }

    @Override
    public BaseResponse applyApis(ApisApplyRequest apisApplyRequest) {
        BaseResponse baseResponse = new BaseResponse();
        if(null == apisApplyRequest){
            baseResponse.setStatus(RetStatus.PARAM_ERROR.getValue());
            baseResponse.setMsg(RetMsg.ParamException.REQUEST_NULL);
            return baseResponse;
        }
        LOGGER.info(WebUtils.getCurrentMethodName() + JSON.toJSONString(apisApplyRequest));
        this.doCheckParam(apisApplyRequest, baseResponse);
        if(null != baseResponse && RetStatus.PARAM_ERROR.getValue() == baseResponse.getStatus()){
            return baseResponse;
        }
        try {
            apiApplyService.applyServices(apisApplyRequest.getServiceIds(), apisApplyRequest.getAppId(), apisApplyRequest.getAppName(), apisApplyRequest.getOperatorId());
            baseResponse.setStatus(RetStatus.SUCESS.getValue());
            baseResponse.setMsg(RetMsg.MsgStatus.SUCCESS);
            return baseResponse;
        } catch (Exception e) {
            LOGGER.error(WebUtils.getCurrentMethodName() + WebUtils.MEET_EXCEPTION,e);
            baseResponse.setMsg(RetMsg.MsgStatus.SYSTEM_ERROR);
            baseResponse.setStatus(RetStatus.SYSTEM_ERROR.getValue());
            return baseResponse;
        }

    }

    private void doCheckParam(ApisApplyRequest apisApplyRequest,BaseResponse baseResponse){
        if(Utils.isNullOrEmpty(apisApplyRequest.getAppId())){
            baseResponse.setStatus(RetStatus.PARAM_ERROR.getValue());
            baseResponse.setMsg(RetMsg.ParamException.APP_ID_NULL);
            return;
        }
        if(Utils.isNullOrEmpty(apisApplyRequest.getAppName())){
            baseResponse.setStatus(RetStatus.PARAM_ERROR.getValue());
            baseResponse.setMsg(RetMsg.ParamException.APP_NAME_NULL);
            return;
        }
        if(Utils.isNullOrEmpty(apisApplyRequest.getOperatorId())){
            baseResponse.setStatus(RetStatus.PARAM_ERROR.getValue());
            baseResponse.setMsg(RetMsg.ParamException.OPERATOR_ID_NULL);
            return;
        }
        if(Utils.isNullOrEmpty(apisApplyRequest.getServiceIds())){
            baseResponse.setStatus(RetStatus.PARAM_ERROR.getValue());
            baseResponse.setMsg(RetMsg.ParamException.SERVICEIDS_NULL);
            return;
        }
    }

    @Override
    public ApplyStatusGetResponse getApplyStatus(ApplyStatusGetRequest applyStatusGetRequest) {
        ApplyStatusGetResponse applyStatusGetResponse = new ApplyStatusGetResponse();
        if(null == applyStatusGetRequest){
            applyStatusGetResponse.setStatus(RetStatus.PARAM_ERROR.getValue());
            applyStatusGetResponse.setMsg(RetMsg.ParamException.REQUEST_NULL);
            return applyStatusGetResponse;
        }
        LOGGER.info(WebUtils.getCurrentMethodName()+JSON.toJSONString(applyStatusGetRequest));
        if(null == applyStatusGetRequest.getAppIds() || applyStatusGetRequest.getAppIds().size() > RetMsg.APP_IDS_LENGTH_MAX){
            applyStatusGetResponse.setStatus(RetStatus.PARAM_ERROR.getValue());
            applyStatusGetResponse.setMsg(RetMsg.ParamException.APP_IDS_ILLEGAL);
            return applyStatusGetResponse;
        }
        try {
            List<com.wisedu.cloud.smp.dal.sp.model.extend.ApplyStatus>  applyStatuses = apiApplyService.getApplyStatus(applyStatusGetRequest.getAppIds());

            List<ApplyStatus> applyStatusesRet = TransferUtils.transApplyStatus(applyStatuses);
            applyStatusGetResponse.setApplyStatuses(applyStatusesRet);
            applyStatusGetResponse.setStatus(RetStatus.SUCESS.getValue());
            applyStatusGetResponse.setMsg(RetMsg.MsgStatus.SUCCESS);
            return applyStatusGetResponse;
        } catch (Exception e) {
            LOGGER.error(WebUtils.getCurrentMethodName() + WebUtils.MEET_EXCEPTION,e);
            applyStatusGetResponse.setMsg(RetMsg.MsgStatus.SYSTEM_ERROR);
            applyStatusGetResponse.setStatus(RetStatus.SYSTEM_ERROR.getValue());
            return applyStatusGetResponse;
        }

    }

    @Override
    public AppliedApisGetResponse getAppliedApis(AppliedApisGetRequest appliedApisGetRequest) {
        AppliedApisGetResponse appliedApisGetResponse = new AppliedApisGetResponse();
        if(null == appliedApisGetRequest){
            appliedApisGetResponse.setStatus(RetStatus.PARAM_ERROR.getValue());
            appliedApisGetResponse.setMsg(RetMsg.ParamException.REQUEST_NULL);
            return appliedApisGetResponse;
        }
        LOGGER.info(WebUtils.getCurrentMethodName()+JSON.toJSONString(appliedApisGetRequest));
        if(null == appliedApisGetRequest.getAppId() || "".equals(appliedApisGetRequest.getAppId())){
            appliedApisGetResponse.setStatus(RetStatus.PARAM_ERROR.getValue());
            appliedApisGetResponse.setMsg(RetMsg.ParamException.APP_ID_NULL);
            return appliedApisGetResponse;
        }
        try {
            AppliedApis appliedApis = apiApplyService.getAppliedApis(appliedApisGetRequest.getAppId());
            if(null != appliedApis){
                List<ApiInfo> apiInfos = TransferUtils.transServInfoToApiInfo(appliedApis.getServiceInfos());
                appliedApisGetResponse.setApiInfos(apiInfos);
                appliedApisGetResponse.setHost(appliedApis.getHost());
                appliedApisGetResponse.setAccessToken(appliedApis.getAccessToken());
            }
            appliedApisGetResponse.setStatus(RetStatus.SUCESS.getValue());
            appliedApisGetResponse.setMsg(RetMsg.MsgStatus.SUCCESS);
            return  appliedApisGetResponse;
        } catch (Exception e) {
            LOGGER.error(WebUtils.getCurrentMethodName() + WebUtils.MEET_EXCEPTION,e);
            appliedApisGetResponse.setMsg(RetMsg.MsgStatus.SYSTEM_ERROR);
            appliedApisGetResponse.setStatus(RetStatus.SYSTEM_ERROR.getValue());
            return appliedApisGetResponse;
        }

    }

    @Override
    public BaseResponse setSchoolAccessToken(SchoolTokenSetRequest schoolTokenSetRequest) {
        BaseResponse baseResponse = new BaseResponse();
        if(null == schoolTokenSetRequest){
            baseResponse.setStatus(RetStatus.PARAM_ERROR.getValue());
            baseResponse.setMsg(RetMsg.ParamException.REQUEST_NULL);
            return baseResponse;
        }
        LOGGER.info(WebUtils.getCurrentMethodName() + JSON.toJSONString(schoolTokenSetRequest));
        this.checkSchoolTokenSetParam(schoolTokenSetRequest, baseResponse);
        if(null != baseResponse && baseResponse.getStatus() == RetStatus.PARAM_ERROR.getValue()){
            return baseResponse;
        }
        SchoolAppServiceBo schoolAppServiceBo = new SchoolAppServiceBo(schoolTokenSetRequest.getSchoolId(),
                schoolTokenSetRequest.getAppId(),schoolTokenSetRequest.getAppName(),
                schoolTokenSetRequest.getAccessToken(),schoolTokenSetRequest.getServiceId(),schoolTokenSetRequest.getSchoolName());

        try {
            schoolApiService.setSchooApiToken(schoolAppServiceBo);
            baseResponse.setStatus(RetStatus.SUCESS.getValue());
            baseResponse.setMsg(RetMsg.MsgStatus.SUCCESS);
            return baseResponse;
        } catch (Exception e) {
            LOGGER.error(WebUtils.getCurrentMethodName() + WebUtils.MEET_EXCEPTION,e);
            baseResponse.setMsg(RetMsg.MsgStatus.SYSTEM_ERROR+":"+e.getMessage());
            baseResponse.setStatus(RetStatus.SYSTEM_ERROR.getValue());
            return baseResponse;
        }

    }

    private void checkSchoolTokenSetParam(SchoolTokenSetRequest schoolTokenSetRequest,BaseResponse baseResponse){
        if(Strings.isNullOrEmpty(schoolTokenSetRequest.getAccessToken())){
            baseResponse.setStatus(RetStatus.PARAM_ERROR.getValue());
            baseResponse.setMsg(RetMsg.ParamException.ACCESS_TOKEN_NULL);
            return;
        }
        if(Strings.isNullOrEmpty(schoolTokenSetRequest.getAppId())){
            baseResponse.setStatus(RetStatus.PARAM_ERROR.getValue());
            baseResponse.setMsg(RetMsg.ParamException.APP_ID_NULL);
            return;
        }
        if(Strings.isNullOrEmpty(schoolTokenSetRequest.getAppName())){
            baseResponse.setStatus(RetStatus.PARAM_ERROR.getValue());
            baseResponse.setMsg(RetMsg.ParamException.APP_NAME_NULL);
            return;
        }
        if(Strings.isNullOrEmpty(schoolTokenSetRequest.getSchoolId())){
            baseResponse.setStatus(RetStatus.PARAM_ERROR.getValue());
            baseResponse.setMsg(RetMsg.ParamException.SCHOOL_ID_NULL);
            return;
        }
        if(Strings.isNullOrEmpty(schoolTokenSetRequest.getSchoolName())){
            schoolTokenSetRequest.setSchoolName(WebConstant.SCHOOL_NAME_DEFAULT);
        }
    }

    @Override
    public SchoolEsbInfoResponse getSchoolEsbInfo(SchoolEsbInfoRequest schoolEsbInfoRequest) {
        SchoolEsbInfoResponse schoolEsbInfoResponse = new SchoolEsbInfoResponse();
        if(null == schoolEsbInfoRequest){
            schoolEsbInfoResponse.setStatus(RetStatus.PARAM_ERROR.getValue());
            schoolEsbInfoResponse.setMsg(RetMsg.ParamException.REQUEST_NULL);
            return schoolEsbInfoResponse;
        }
        LOGGER.info(WebUtils.getCurrentMethodName()+JSON.toJSONString(schoolEsbInfoRequest));
        if(null != schoolEsbInfoResponse && schoolEsbInfoResponse.getStatus() == RetStatus.PARAM_ERROR.getValue()){
            return schoolEsbInfoResponse;
        }
        try {
            AppEsbInfo appEsbInfo = schoolApiService.getSchoolEsbInfo(schoolEsbInfoRequest.getSchoolId(),schoolEsbInfoRequest.getAppId());
            if(null != appEsbInfo){
                schoolEsbInfoResponse.setAccessToken(appEsbInfo.getAccessToken());
                schoolEsbInfoResponse.setEsbHost(appEsbInfo.getEsbHost());
            }
            schoolEsbInfoResponse.setStatus(RetStatus.SUCESS.getValue());
            schoolEsbInfoResponse.setMsg(RetMsg.MsgStatus.SUCCESS);
            return schoolEsbInfoResponse;
        } catch (Exception e) {
            LOGGER.error(WebUtils.getCurrentMethodName() + WebUtils.MEET_EXCEPTION,e);
            schoolEsbInfoResponse.setMsg(RetMsg.MsgStatus.SYSTEM_ERROR+":"+e.getMessage());
            schoolEsbInfoResponse.setStatus(RetStatus.SYSTEM_ERROR.getValue());
            return schoolEsbInfoResponse;
        }
    }

    private void checkSchoolEsbInfoParam(SchoolEsbInfoRequest schoolEsbInfoRequest,SchoolEsbInfoResponse schoolEsbInfoResponse){
        if(Strings.isNullOrEmpty(schoolEsbInfoRequest.getAppId())){
            schoolEsbInfoResponse.setStatus(RetStatus.PARAM_ERROR.getValue());
            schoolEsbInfoResponse.setMsg(RetMsg.ParamException.APP_ID_NULL);
            return;
        }

        if(Strings.isNullOrEmpty(schoolEsbInfoRequest.getSchoolId())){
            schoolEsbInfoResponse.setStatus(RetStatus.PARAM_ERROR.getValue());
            schoolEsbInfoResponse.setMsg(RetMsg.ParamException.SCHOOL_ID_NULL);
            return;
        }

    }
    @Override
    public TaskStatusResponse getSetTokenTaskStatus(TaskStatusRequest taskStatusRequest)
    {
        TaskStatusResponse taskStatusResponse = new TaskStatusResponse();
        if(null == taskStatusRequest){
            taskStatusResponse.setStatus(RetStatus.PARAM_ERROR.getValue());
            taskStatusResponse.setMsg(RetMsg.ParamException.REQUEST_NULL);
            return taskStatusResponse;
        }
        LOGGER.info(WebUtils.getCurrentMethodName()+JSON.toJSONString(taskStatusRequest));
        if(null == taskStatusRequest.getQueryConditions() || taskStatusRequest.getQueryConditions().isEmpty()){
            taskStatusResponse.setStatus(RetStatus.PARAM_ERROR.getValue());
            taskStatusResponse.setMsg(RetMsg.ParamException.APP_ID_NULL);
            return taskStatusResponse;
        }

        try {
            List<SetTokenTask> setTokenTasks = tokenSetTaskService.getSetTokenTask(taskStatusRequest.getQueryConditions());
            taskStatusResponse.setSetTokenTasks(setTokenTasks);
            taskStatusResponse.setStatus(RetStatus.SUCESS.getValue());
            taskStatusResponse.setMsg(RetMsg.MsgStatus.SUCCESS);
            return taskStatusResponse;
        } catch (Exception e) {
            LOGGER.error(WebUtils.getCurrentMethodName() + WebUtils.MEET_EXCEPTION, e);
            taskStatusResponse.setMsg(RetMsg.MsgStatus.SYSTEM_ERROR + ":" + e.getMessage());
            taskStatusResponse.setStatus(RetStatus.SYSTEM_ERROR.getValue());
            return taskStatusResponse;
        }
    }


}
