package com.wisedu.cloud.smp.biz.service.impl.api;

import com.alibaba.fastjson.JSON;
import com.google.common.base.Strings;
import com.wisedu.cloud.smp.biz.common.LicenseConstant;

import com.wisedu.cloud.smp.biz.config.Constant;
import com.wisedu.cloud.smp.biz.config.TaskStatus;
import com.wisedu.cloud.smp.biz.model.api.SchoolAppServiceBo;
import com.wisedu.cloud.smp.biz.model.api.SchoolGetBo;
import com.wisedu.cloud.smp.biz.model.api.SchoolInfoBo;
import com.wisedu.cloud.smp.biz.service.api.SchoolApiService;
import com.wisedu.cloud.smp.common.conf.GlobalConf;
import com.wisedu.cloud.smp.common.exception.DaoException;
import com.wisedu.cloud.smp.common.exception.ServiceException;
import com.wisedu.cloud.smp.common.util.MD5Utils;
import com.wisedu.cloud.smp.common.util.RsaUtils;
import com.wisedu.cloud.smp.common.util.Utils;
import com.wisedu.cloud.smp.dal.sp.dao.ServiceDao;
import com.wisedu.cloud.smp.dal.sp.dao.UserRoleDao;
import com.wisedu.cloud.smp.dal.sp.model.*;
import com.wisedu.cloud.smp.dal.sp.model.extend.ServiceInfo;
import com.wisedu.cloud.smp.dal.spc.dao.*;
import com.wisedu.cloud.smp.dal.spc.model.*;
import com.wisedu.cloud.smp.dal.spc.model.extend.AppEsbInfo;
import com.wisedu.cloud.smp.dal.spc.model.extend.Page;
import com.wisedu.cloud.smp.dal.spc.model.extend.SchoolWithLicense;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.net.URL;
import java.util.*;

/**
 * Created by huangxuecan on 2016/3/8.
 */
@Service("schoolApiService")
public class SchoolApiServiceImpl implements SchoolApiService {

    @Autowired
    private SchoolEsbDao schoolEsbDao;

    @Autowired
    private UserRoleDao userRoleDao;

    @Autowired
    private ServiceDao serviceDao;

    @Autowired
    private TaskDao taskDao;

    @Value("#{rabbitMqQueueConfig['setschooltoken.queue.name']}")
    private String  setSchoolTokenQueueName;

    @Value("#{rabbitMqQueueConfig['exchange.name']}")
    private String        exchangeName;

    @Autowired
    private RabbitTemplate rabbitTemplate;

    @Autowired
    private SchoolAppDao schoolAppDao;

    @Autowired
    private SchoolDao schoolDao;

    @Autowired
    private SchoolLicenseDao schoolLicenseDao;

    @Autowired
    private SchoolRegDao schoolRegDao;

    @Override
    public void setSchooApiToken(SchoolAppServiceBo schoolAppServiceBo) throws ServiceException {
        if(isSchoolAppServiceBoNull(schoolAppServiceBo)){
            return;
        }
        try {
            Task task = new Task();
            task.setStartTime(new Date().getTime());
            task.setResultStatus(TaskStatus.RUNNIN.getValue());
            task.setTaskType(Constant.TASK_TYPE_SET_TOKEN);
            task.setTaskName(Constant.TASK_NAME_SET_TOKEN);
            task.setAppId(schoolAppServiceBo.getAppId());
            task.setSchoolId(schoolAppServiceBo.getSchoolId());
            taskDao.insertTask(task);

            this.doDealSchoolProcess(schoolAppServiceBo);

            User userExist = userRoleDao.getUserByUserName(schoolAppServiceBo.getAppId());

            if(isUserNull(userExist)){
                task.setResultStatus(TaskStatus.FINISH_SUCESS.getValue());
                task.setEndTime(new Date().getTime());
                task.setErrorMsg(Constant.SET_TOKEN_ERROR_MSG_APPID_NULL + JSON.toJSONString(schoolAppServiceBo));
                taskDao.updateTask(task);
                this.setSchoolAppInfo(schoolAppServiceBo);
                return;
            }

            Set<String> serviceIdSet = new HashSet<>();
            if(Utils.isNullOrEmpty(schoolAppServiceBo.getServiceIds())) {
                List<ServiceInfo> serviceInfos = serviceDao.getServicesByApplyApp(schoolAppServiceBo.getAppId());

                if (Utils.isNullOrEmpty(serviceInfos)) {
                    task.setResultStatus(TaskStatus.FINISH_SUCESS.getValue());
                    task.setEndTime(new Date().getTime());
                    task.setErrorMsg(Constant.SET_TOKEN_ERROR_MSG_APPID_NULL + JSON.toJSONString(schoolAppServiceBo));
                    taskDao.updateTask(task);
                    this.setSchoolAppInfo(schoolAppServiceBo);
                    return;
                }
                this.doServiceInfoProcess(serviceInfos,serviceIdSet);
            }else{
                serviceIdSet.addAll(schoolAppServiceBo.getServiceIds());
            }

            List<String> serviceIds = new ArrayList<>();
            serviceIds.addAll(serviceIdSet);

            schoolAppServiceBo.setServiceIds(serviceIds);
            schoolAppServiceBo.setTaskId(task.getId());
            rabbitTemplate.setExchange(exchangeName);
            rabbitTemplate.setQueue(setSchoolTokenQueueName);
            rabbitTemplate.setRoutingKey(Constant.SET_SCHOOL_TOKEN_ROUTINGKEY);
            rabbitTemplate.convertAndSend(schoolAppServiceBo);

        } catch (DaoException e) {
            throw new ServiceException("",e);
        }
    }

    private void doDealSchoolProcess(SchoolAppServiceBo schoolAppServiceBo) throws DaoException {
        School schoolExist = schoolDao.getSchoolById(schoolAppServiceBo.getSchoolId());
        if(isSchoolNull(schoolExist)){
            School school = new School();
            school.setSchoolId(schoolAppServiceBo.getSchoolId());
            school.setName(schoolAppServiceBo.getSchoolName());
            schoolDao.insertSchool(school);
        }
    }

    private void doServiceInfoProcess( List<ServiceInfo> serviceInfos,Set<String> serviceIdSet){
        for (ServiceInfo serviceInfo : serviceInfos) {
            serviceIdSet.add(serviceInfo.getServiceId());
        }
    }
    private boolean isSchoolAppServiceBoNull(SchoolAppServiceBo schoolAppServiceBo){
        return null == schoolAppServiceBo || null == schoolAppServiceBo.getAppId()
                || null == schoolAppServiceBo.getAppName() || null == schoolAppServiceBo.getSchoolId();
    }

    private boolean isSchoolNull(School schoolExist){
        return null == schoolExist || null == schoolExist.getSchoolId();
    }

    private boolean isUserNull(User userExist){
        return null == userExist || null == userExist.getUserId();
    }

    private void setSchoolAppInfo(SchoolAppServiceBo schoolAppServiceBo) throws DaoException {
        User userExist = userRoleDao.getUserByUserName(schoolAppServiceBo.getAppId());
        if(null == userExist || null == userExist.getUserId()) {
            User user = new User();
            user.setDescription(schoolAppServiceBo.getAppName());
            user.setUserName(schoolAppServiceBo.getAppId());
            user.setPassword(MD5Utils.md5(schoolAppServiceBo.getAppId() + GlobalConf.PWD_SALT));
            user.setIsApp(true);
            userRoleDao.insertUser(user);
            UserRole userRole = new UserRole();
            userRole.setUserId(user.getUserId());
            userRole.setRoleId(Constant.ROLE_APP);
            userRoleDao.insertUserRole(userRole);
        }
        SchoolApp schoolApp = new SchoolApp();
        schoolApp.setAppId(schoolAppServiceBo.getAppId());
        schoolApp.setAccessToken(schoolAppServiceBo.getAccessToken());
        schoolApp.setAppName(schoolAppServiceBo.getAppName());
        schoolApp.setSchoolId(schoolAppServiceBo.getSchoolId());
        SchoolAppExample schoolAppExample = new SchoolAppExample();
        schoolAppExample.createCriteria().andSchoolIdEqualTo(schoolAppServiceBo.getSchoolId()).andAppIdEqualTo(schoolAppServiceBo.getAppId());

        List<SchoolApp> schoolAppExists =schoolAppDao.getSchoolAppByExample(schoolAppExample);

        if(null != schoolAppExists && !schoolAppExists.isEmpty()) {
            SchoolApp schoolAppExist = schoolAppExists.get(0);
            schoolApp.setId(schoolAppExist.getId());
            schoolApp.setStatus((short) 0);
            schoolAppDao.updateSchoolAppById(schoolApp);
        }else {
            schoolAppDao.insertSchoolApp(schoolApp);
        }

    }




    @Override
    public AppEsbInfo getSchoolEsbInfo(String schoolId, String appId) throws ServiceException {
        try {
            if(Strings.isNullOrEmpty(schoolId) || Strings.isNullOrEmpty(appId)){
                return new AppEsbInfo();
            }
            List<AppEsbInfo> appEsbInfos = schoolEsbDao.getAppEsbInfo(appId, schoolId);
            if(null == appEsbInfos || appEsbInfos.isEmpty()){
                return new AppEsbInfo();
            }
            return appEsbInfos.get(0);
        } catch (Exception e) {
            throw new ServiceException("",e);
        }
    }

    @Override
    public SchoolGetBo getSchoolsByCondition(String condition,Page page) throws ServiceException{
        if (null == page){
            throw new ServiceException("params null");
        }
        SchoolGetBo schoolGetBo = new SchoolGetBo();
        SchoolExample schoolExample = new SchoolExample();
        schoolExample.createCriteria().andStatusEqualTo((short)0);
        try {
            List<SchoolWithLicense> schools = schoolDao.getSchools("%" + condition + "%", page);
            int total  = schoolDao.getSchoolNum(schoolExample);
            if (!Utils.isNullOrEmpty(schools)){
                for (SchoolWithLicense schoolWithLicense : schools){
                    if (Strings.isNullOrEmpty(schoolWithLicense.getLicense())){
                        schoolWithLicense.setLicense("未生成license");
                    }else {
                        schoolWithLicense.setLicense("已生成license");
                    }
                    if (schoolWithLicense.getVersion() == null){
                        schoolWithLicense.setVersionName("未获取产品");
                    }
                    else if (schoolWithLicense.getVersion() == 1){
                        schoolWithLicense.setVersionName("完整版");
                    }else {
                        schoolWithLicense.setVersionName("精简版");
                    }
                }
            }
            schoolGetBo.setRows(schools);
            schoolGetBo.setTotal(total);
        }catch (Exception e){
            throw new ServiceException("",e);
        }

        return schoolGetBo;
    }

    public Boolean generateSchoolLicense(String schoolId,Integer flag) throws ServiceException{
        if (isVoNull(schoolId,flag)){
            throw new ServiceException("params null");
        }
        String license = "";
        try {
            if (flag.equals(LicenseConstant.PRODUCT_VERSION_FULL.getValue())){
                license = RsaUtils.encryptByPublicKey(schoolId + "#" + LicenseConstant.PRODUCT_VERSION_FULL.getValue(), RsaUtils.getRSAPublicKey());
            }
            if (flag.equals(LicenseConstant.PRODUCT_VERSION_SIMPLE.getValue())){
                license = RsaUtils.encryptByPublicKey(schoolId + "#" + LicenseConstant.PRODUCT_VERSION_SIMPLE.getValue(),RsaUtils.getRSAPublicKey());
            }
            SchoolLicense schoolLicense = new SchoolLicense();
            schoolLicense.setSchoolId(schoolId);
            schoolLicense.setLicense(license);
            schoolLicense.setVersion(Short.parseShort(flag.toString()));
            SchoolLicenseExample schoolLicenseExample = new SchoolLicenseExample();
            schoolLicenseExample.createCriteria().andSchoolIdEqualTo(schoolId).andStatusEqualTo((short)0);
            int count = schoolLicenseDao.isSchoolLicenseExist(schoolLicenseExample);
            int result = 0 ;
            if (count > 0){
                result = schoolLicenseDao.updateSchoolLicense(schoolLicense,schoolLicenseExample);
            }else {
                result =  schoolLicenseDao.insertSchoolLicense(schoolLicense);
            }
            if (result > 0 ){
                return true;
            }
        }catch (Exception e){
            throw new ServiceException("",e);
        }
        return false;
    }

    private boolean isVoNull(String schoolId,Integer flag){
        return null == flag || Strings.isNullOrEmpty(schoolId);
    }

    public  String  getSchoolLicense(String schoolId) throws ServiceException{
        if (Strings.isNullOrEmpty(schoolId)){
            throw new ServiceException("params null");
        }
        String license = "";
        SchoolLicenseExample schoolLicenseExample = new SchoolLicenseExample();
        try {
            schoolLicenseExample.createCriteria().andSchoolIdEqualTo(schoolId).andStatusEqualTo((short) 0);
            List<SchoolLicense> schoolLicenses = schoolLicenseDao.getLicenses(schoolLicenseExample);
            if (null != schoolLicenses && schoolLicenses.size() > 1){
                return license;
            }
            if (Utils.isNullOrEmpty(schoolLicenses)){
                license = "未生成license";
                return license;
            }
            license = schoolLicenses.get(0).getLicense();
        }catch (Exception e){
            throw new ServiceException("",e);
        }
        return license;
    }

    @Transactional(rollbackFor = Exception.class)
    public SchoolInfoBo getSchoolInfoById(String schoolId,String version) throws ServiceException{
        SchoolInfoBo schoolInfoBo = new SchoolInfoBo();
        try {
            School school = schoolDao.getSchoolById(schoolId);
            if (school == null){
                schoolInfoBo.setSchoolName("学校未创建，请联系项目管理部");
                return schoolInfoBo;
            }
            schoolInfoBo.setSchoolName(school.getName());
            SchoolRegExample schoolRegExample = new SchoolRegExample();
            schoolRegExample.setOrderByClause("create_time desc");
            schoolRegExample.createCriteria().andSchoolIdEqualTo(schoolId).andStatusEqualTo((short) 0);
            List<SchoolReg> schoolRegList = schoolRegDao.getSchoolRegs(schoolRegExample);
            if (Utils.isNullOrEmpty(schoolRegList)){
                return schoolInfoBo;
            }
            schoolInfoBo.setVersionList(schoolRegList);
            boolean isVersionExist  = false;
            for (SchoolReg schoolReg : schoolRegList){
                if (schoolReg.getVersion().equals(version)){
                    isVersionExist = true;
                    break;
                }
            }
            if (isVersionExist){
                schoolInfoBo.setIsExist(true);
                SchoolEsb schoolEsbs = schoolEsbDao.getSchoolEsbInfo(schoolId);
                schoolInfoBo.setSmpHost(schoolEsbs.getProtocol() + "://" +schoolEsbs.getSmpHost()+ ":" + schoolEsbs.getSmpPort());
            }else {
                schoolInfoBo.setIsExist(false);
            }
        }catch (Exception e){
            throw new ServiceException("",e);
        }
        return schoolInfoBo;
    }

    @Transactional(rollbackFor = Exception.class)
    public Boolean addSchoolRegVersion(String schoolId,String version,String smpDomain,String apiDomain) throws ServiceException{
        try {
            SchoolRegExample schoolRegExample = new SchoolRegExample();
            schoolRegExample.createCriteria().andSchoolIdEqualTo(schoolId).andVersionEqualTo(version).andStatusEqualTo((short)0);
            int result = schoolRegDao.isVersionExist(schoolRegExample);
            if (result < 1) { // 不存在保存，存在则放弃，防止更新操作往数据库添加版本数据
                SchoolReg schoolReg = new SchoolReg();
                schoolReg.setSchoolId(schoolId);
                schoolReg.setVersion(version);
                schoolRegDao.insertSchoolRegVersion(schoolReg);
            }

            SchoolEsbExample schoolEsbExample = new SchoolEsbExample();
            schoolEsbExample.createCriteria().andSchoolIdEqualTo(schoolId).andStatusEqualTo((short)0);
            int isSchoolEsbExist = schoolEsbDao.isSchoolEsbExist(schoolEsbExample);
            URL smpUrl = new URL(smpDomain);
            URL apiUrl = new URL(apiDomain);
            SchoolEsb schoolEsb = new SchoolEsb();
            schoolEsb.setProtocol(smpUrl.getProtocol());
            schoolEsb.setEsbHost(apiUrl.getHost());
            schoolEsb.setEsbPort(apiUrl.getPort());
            schoolEsb.setSmpHost(smpUrl.getHost());
            schoolEsb.setSmpPort(smpUrl.getPort());
            if (isSchoolEsbExist >0) {
                schoolEsbDao.updateSchoolEsb(schoolEsb,schoolEsbExample);
            }else {
                schoolEsbDao.insertSchoolEsb(schoolEsb);
            }
        }catch (Exception e){
            throw new ServiceException("",e);
        }
        return true;
    }

}
